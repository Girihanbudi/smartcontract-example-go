// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/google/wire"
	"smartm2m-technical-test/internal/app/filesystem/api/rest"
	"smartm2m-technical-test/internal/app/filesystem/usecase/usecaseimpl"
	"smartm2m-technical-test/internal/pkg/credential"
	"smartm2m-technical-test/internal/pkg/env"
	"smartm2m-technical-test/internal/pkg/env/tool"
	"smartm2m-technical-test/internal/pkg/ethclient"
	"smartm2m-technical-test/internal/pkg/http/server"
	"smartm2m-technical-test/internal/pkg/http/server/router"
)

import (
	_ "smartm2m-technical-test/docs"
)

// Injectors from wire.go:

func NewApp() (*App, error) {
	config := env.ProvideEnv()
	configConfig := tool.ExtractCredsConfig(config)
	options := credential.Options{
		Config: configConfig,
	}
	tlsCredentials := credential.NewTLSCredentials(options)
	config2 := tool.ExtractHttpServerConfig(config)
	engine := router.NewRouter()
	serverOptions := server.Options{
		Config: config2,
		Router: engine,
		Creds:  tlsCredentials,
	}
	serverServer := server.NewServer(serverOptions)
	config3 := tool.ExtractEthClientConfig(config)
	ethclientOptions := ethclient.Options{
		Config: config3,
	}
	client := ethclient.NewClient(ethclientOptions)
	usecaseimplOptions := usecaseimpl.Options{
		EthClient: client,
	}
	usecase := usecaseimpl.NewfilesystemUsecase(usecaseimplOptions)
	restOptions := rest.Options{
		Router:     engine,
		Filesystem: usecase,
	}
	handler := rest.NewfilesystemHandler(restOptions)
	appOptions := Options{
		TlsCreds:              tlsCredentials,
		HttpServer:            serverServer,
		filesystemRestHandler: handler,
	}
	app := &App{
		Options: appOptions,
	}
	return app, nil
}

// wire.go:

var AppSet = wire.NewSet(wire.Struct(new(Options), "*"), wire.Struct(new(App), "*"))
